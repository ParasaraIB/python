# === List comprehensions vs generators ===

# list of strings
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']
# list comprehension
fellow1 = [member for member in fellowship if len(member) >= 7]
# generator expression
fellow2 = (member for member in fellowship if len(member) >= 7)
# print fellwo1 and fellow2
print(fellow1)
print(fellow2)

# === Generator expressions ===

# create generator object: result
result = (num for num in range (0,31))
# print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))
# print the rest of the values
for value in result :
    print(value)

# === Changing the output in generators expressions ===

# create a list of strings: lannister
lannister = ['ceresei', 'jaime', 'twyn', 'tyrion', 'joffrey']
# create a generator object: lengths
lengths = (len(person) for person in lannister)
# iterate over and print the values in lengths
for value in lengths :
    print(value)

# === Build a generator ===

# create a list of strings: lannister
lannister = ['ceresei', 'jaime', 'twyn', 'tyrion', 'joffrey']
# define generator function get_lengths
def get_lengths(input_list) :
    """Generator function that yields the strings in input_list."""
    # yield the length of a string
    for person in input_list :
        yield(len(person))
# print the values generated by get_lenghts()
for value in get_lengths(lannister) :
    print(value)
